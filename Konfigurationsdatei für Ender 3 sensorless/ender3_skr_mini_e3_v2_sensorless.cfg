# This file contains common pin mappings for the BIGTREETECH SKR mini
# E3 v2.0. To use this config, the firmware should be compiled for the
# STM32F103 with a "28KiB bootloader" and USB communication. Also,
# select "Enable extra low-level configuration options" and configure
# "GPIO pins to set at micro-controller startup" to "!PA14".

# The "make flash" command does not work on the SKR mini E3. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR
# mini E3 with that SD card.

# See docs/Config_Reference.md for a description of parameters.

[gcode_macro G29]
gcode:
  BED_MESH_CALIBRATE
  G90
  G1 X15 Y15 Z15
  
[probe]
pin: ^PC14
x_offset: 0.0
z_offset: 0
speed: 2.0
samples: 2
sample_retract_dist: 2.0
lift_speed: 2
samples_result: average
samples_tolerance: 0.100
samples_tolerance_retries: 2
#activate_gcode:
#deactivate_gcode: SET_GCODE_OFFSET Z=-0.2

#[bltouch]
#sensor_pin: ^PC14
#control_pin: PA1
#x_offset: 0
#y_offset: 0
#Higher the offset, the closer to the bed the nozzle will be.
#Lower the offset, the further the nozzle will be.
#If you need more squish or if it's too high, increase the offset.
#If it's too close, lower the offset.
#z_offset = 0.950
#z_offset = 1.15
#pin_move_time: 0.4
#probe_with_touch_mode: True
#pin_up_touch_mode_reports_triggered: False
#stow_on_each_sample: False

[bed_mesh]
speed: 120
horizontal_move_z: 5
mesh_min: 15, 15
mesh_max: 185, 200
probe_count: 3,3
algorithm: bicubic
fade_start: 1
fade_end: 10
fade_target: 0

[input_shaper]
shaper_freq_x: 41.6
shaper_type_x: mzv
shaper_freq_y: 41.8
shaper_type_y: mzv

[bed_screws]
screw1: 30,30
screw2: 200,30
screw3: 200,200
screw4: 30,200

[screws_tilt_adjust]
screw1: 70.5,37.5
screw1_name: front left screw
screw2: 240,37.5
screw2_name: front right screw
screw3: 240,207.5
screw3_name: rear right screw
screw4: 70.5,207.5
screw4_name: rear left screw
horizontal_move_z: 10
speed: 50
screw_thread: CW-M4

#[mcu rpi]
#serial: /tmp/klipper_host_mcu

#[adxl345]
#cs_pin: rpi:None

#[resonance_tester]
#accel_chip: adxl345
#probe_points: 100,100,20  # an example

[safe_z_home] 
home_xy_position: 117.5,117.5 # Change coordinates to the center of your print bed
z_hop: 10# Move up 10mm z_hop_speed: 5

[virtual_sdcard]
path: ~/gcode_files

[display_status]

[pause_resume]

[stepper_x]
step_pin: PB13
dir_pin: !PB12
enable_pin: !PB14
microsteps: 16
rotation_distance: 40
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_endstop: 0
position_min: 0
#position_endstop: 0
#position_max: 240
position_max: 235
homing_speed: 50

[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
diag_pin: PC0
uart_address: 0
run_current: 0.580
hold_current: 0.500
stealthchop_threshold: 999999
driver_SGTHRS: 50

[stepper_y]
step_pin: PB10
dir_pin: !PB2
enable_pin: !PB11
microsteps: 16
rotation_distance: 40
position_endstop: -15
endstop_pin: tmc2209_stepper_y:virtual_endstop
#position_endstop: -15
#position_endstop: 0
position_min: -16
position_max: 230
#position_max: 240
homing_speed: 50

[tmc2209 stepper_y]
uart_pin: PC11
tx_pin: PC10
diag_pin: PC1
uart_address: 2
run_current: 0.580
hold_current: 0.500
stealthchop_threshold: 999999
driver_SGTHRS: 50

[stepper_z]
step_pin: PB0
dir_pin: PC5
enable_pin: !PB1
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
#position_endstop: -1
position_max: 250
position_min: -1
homing_speed: 1
homing_retract_dist: 2
second_homing_speed: 0.5

[tmc2209 stepper_z]
uart_pin: PC11
tx_pin: PC10
uart_address: 1
run_current: 0.580
hold_current: 0.500
stealthchop_threshold: 999999

[extruder]
step_pin: PB3
dir_pin: !PB4
enable_pin: !PD2
microsteps: 16
#PLA
#rotation_distance: 23.45
rotation_distance: 34
#full_steps_per_rotation: 93
nozzle_diameter: 0.400
filament_diameter: 1.750
max_extrude_cross_section: 10
heater_pin: PC8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0
control: pid
pid_Kp: 21.527
pid_Ki: 1.063
pid_Kd: 108.982
min_temp: 0
max_temp: 260

[tmc2209 extruder]
uart_pin: PC11
tx_pin: PC10
uart_address: 3
run_current: 0.650
hold_current: 0.500
stealthchop_threshold: 999999

[homing_heaters]
#steppers:
#heaters:

[heater_bed]
heater_pin: PC9
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC3
control: pid
pid_Kp: 54.027
pid_Ki: 0.770
pid_Kd: 948.182
min_temp: 0
max_temp: 130

[heater_fan nozzle_cooling_fan]
pin: PC7

[fan]
pin: PC6

[static_digital_output usb_pullup_enable]
pins: !PA14

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f103xe_35FFD7054E4B323517881143-if00
#serial: /dev/ttyAMA0
baud: 250000
restart_method: command

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8,  EXP1_9=<GND>,
    EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PB15, EXP1_10=<5V>

[printer]
kinematics: cartesian
max_velocity: 600
max_accel: 2000
max_z_velocity: 5
max_z_accel: 100

[output_pin BEEPER_Pin]
pin: PB5

[gcode_macro M300]
gcode:  
  {% set S = params.S|default(1000)|int %} ; S sets the tone frequency
  {% set P = params.P|default(100)|int %} ; P sets the tone duration
  {% set L = 0.5 %} ; L varies the PWM on time, close to 0 or 1 the tone gets a bit quieter. 0.5 is a symmetric waveform
  {% if S <= 0 %} ; dont divide through zero
  {% set F = 1 %}
  {% set L = 0 %}
  {% elif S >= 10000 %} ;max frequency set to 10kHz
  {% set F = 0 %}
  {% else %}
  {% set F = 1/S %} ;convert frequency to seconds 
  {% endif %}
  SET_PIN PIN=BEEPER_Pin VALUE={L} CYCLE_TIME={F} ;Play tone
  G4 P{P} ;tone duration
  SET_PIN PIN=BEEPER_Pin VALUE=0
   
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
